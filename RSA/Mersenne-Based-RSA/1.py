from Crypto.Util.number import *
from gmpy2 import iroot, gcd

n = 2185117275407329493704409643426031750335664972502908228262569687853653253551641974999282770639297709207236515859043038670980072205112304661053691511338842726627494610440140259408325780945409058103256016533574664390745346605574976173834922404667585562002578669413889647210969834492555462230987942573557380522922238633429860211518953531550631797422965614944467280372149634100051335857185289141709891849112908988640903449692041845495169810184856466411086118945896740639276885520058078076157709163178813579385884534836496965087352623083616039623887918665045348095257961014902148530541607448714905048573465680784601333555074241869411687
c = 581709100817811444920095357195895023478596451568720098152765957738707547829576237509544181919071255363689905724280375610887977312507761513211172227645388299103836870890147385219082978395082680729159127040376442084884930631174614809647228529428302972753538050532437310768824758424363981358581910130829599990356824263654014749049422701767054305023571186976620569665182213765143548768316585552344481478610858991409358753209494898686158928183472709413923383461689667289210692956228953095011987153532366537268324357515516119882013754515432309251346060422842792751839294125415140428250398469331333831712594655104413985532550929508100211

p = 0
q = 0
for i in range(n.bit_length()):
    pq_sum = pow(2, i) + 65536
    tmp = pow(pq_sum, 2) - 4 * n
    if tmp < 0:
        continue
    else:
        res = iroot(tmp, 2)
        if res[1]:
            p = (pq_sum + res[0]) // 2
            q = (pq_sum - res[0]) // 2
            break

assert (p * q == n)

phi_n = (p -1)(q-1)

def decrypt_msg(c, n, phi_n):
    i = 0

    while True:
        i += 1
        e = pow(2, i) - 1 
        g = GCD(e, phi_n)

        try:
            if g == 1:
                d = inverse(e, phi_n)
                m = pow(c, d, n)
                msg = long_to_bytes(m)

                if b"EWU" in msg:
                    print(f"Found with i = {i}, e = {e}: {msg}")
                    break
            
            else:
                d = inverse(e // g, phi_n)
                gth_power_m = pow(c, d, n)
                result = iroot(gth_power_m, g)
                if result[1]:
                    m = result[0]
                    msg = long_to_bytes(m)
                    if b"EWU" in msg:
                        print(f"Found with e = {e}, i = {i}: {msg}")
                        break
        except Exception as e:

            print(f"Error occurred at i = {i}: {e}")

decrypt_msg(c, n, phi_n)
